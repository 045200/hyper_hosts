import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
import os
from datetime import datetime

# GitHub ÁéØÂ¢ÉÈÖçÁΩÆ
MAX_RETRIES = 3
REQUEST_TIMEOUT = 20
USER_AGENT = "GitHub-Hosts-Merger/1.0 (+https://github.com/045200/hyper_hosts)"
OUTPUT_PATH = os.path.join(os.getcwd(), "rules/hosts")

def create_session():
    session = requests.Session()
    retry = Retry(
        total=MAX_RETRIES,
        status_forcelist=[500, 502, 503, 504],
        allowed_methods=['GET']
    )
    session.mount('https://', HTTPAdapter(max_retries=retry))
    return session

def fetch_hosts():
    urls = [
        "https://raw.githubusercontent.com/jdlingyu/ad-wars/master/hosts",
        "https://lingeringsound.github.io/10007_auto/reward",
        "https://raw.githubusercontent.com/TG-Twilight/AWAvenue-Ads-Rule/main/Filters/AWAvenue-Ads-Rule-hosts.txt",
        "https://raw.githubusercontent.com/ineo6/hosts/master/hosts"
    ]

    entries = set()
    session = create_session()

    for url in urls:
        try:
            response = session.get(url, 
                                 timeout=REQUEST_TIMEOUT,
                                 headers={'User-Agent': USER_AGENT})
            response.raise_for_status()
            
            for line in response.text.splitlines():
                cleaned = line.split('#')[0].strip()
                if cleaned and not cleaned.startswith('#'):
                    entries.add(cleaned)
            
            print(f"‚úÖ Success: {url}")
        except Exception as e:
            print(f"‚ùå Failed: {url} - {str(e)}")
            continue

    os.makedirs(os.path.dirname(OUTPUT_PATH), exist_ok=True)
    
    if entries:
        with open(OUTPUT_PATH, "w", encoding="utf-8") as f:
            f.write(f"# Auto-generated by GitHub Actions\n")
            f.write(f"# Updated at {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}\n\n")
            f.write("\n".join(sorted(entries)))
        print(f"üîÑ Hosts file updated: {len(entries)} entries")
    else:
        raise Exception("‚ö†Ô∏è No valid entries found")

if __name__ == "__main__":
    fetch_hosts()
